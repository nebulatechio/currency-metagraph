#!/usr/bin/env bash

function load_scripts () {
  BASEDIR=$(dirname "$0")
  cd $BASEDIR
  if [ -d "scripts" ]; then
    cd scripts/
  fi

  source ./docker.sh
  source ./join-cluster.sh
  source ./custom-template.sh
  source ./utils.sh
  
  cd ../
  fill_env_variables_from_json_config_file
  cd scripts/
}

# @cmd Installs a local framework and detaches project
function install() {  
  load_scripts

  cd ../

  check_if_project_name_is_set

  echo "Installing hydra ..."
  echo "Installing Framework..."
  create_template project

  chmod -R a+rwx infra/docker/monitoring
  chmod -R a+rwx infra/docker/monitoring/grafana/storage/
  chmod -R a+rwx infra/docker/monitoring/grafana/dashboards/
  chmod -R a+rwx infra/docker/monitoring/grafana/datasources/
  chmod -R a+rwx infra/docker/monitoring/prometheus/

  if [ -d ".git" ]; then
    chmod -R +w .git
    rm -r .git
  fi
  echo "Installed"
}

# @cmd Build containers
# @flag   --no_cache                      Build docker containers with no cache
# @flag   --run                           Run containers after build
# @flag   --rebuild_tessellation          Rebuild the tessellation project
function build() {
  load_scripts
  set_docker_compose
  OUTPUT_YELLOW=$(tput setaf 3)
  OUTPUT_WHITE=$(tput setaf 7)
  check_if_docker_is_running

  if [[ -z "$GITHUB_TOKEN" ]]; then
    echo "You should provide the GITHUB_TOKEN on euclid.json file"
    exit 1
  fi

  check_if_tessellation_needs_to_be_rebuild
  
  check_if_github_token_is_valid
  check_p12_files
  check_if_project_name_is_set
  check_if_project_directory_exists
  create_docker_custom_network

  cd ../infra/docker

  TESSELLATION_VERSION=$TESSELLATION_VERSION
  DOCKER_CONTAINERS=$DOCKER_CONTAINERS

  if [[ -z "$(docker images -q ubuntu-with-java-and-sbt)" || ! -z "$argc_rebuild_tessellation" ]]; then
    echo "Building ubuntu shared image..."
    cd ubuntu-with-java-and-sbt
    if [ ! -z "$argc_no_cache" ]; then
      $dockercompose build --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg TESSELLATION_VERSION=$TESSELLATION_VERSION --no-cache
    else
      $dockercompose build --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg TESSELLATION_VERSION=$TESSELLATION_VERSION
    fi
    cd ../
    echo "Ubuntu image built"
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "global-l0" ]]; then
    export SHOULD_RESET_GENESIS_FILE=""
    cd global-l0
    if [ ! -z "$argc_no_cache" ]; then
      echo "Building Global L0 image... (NO CACHE)"
      $dockercompose build --build-arg TESSELLATION_VERSION=$TESSELLATION_VERSION --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_KEY_ALIAS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD=$P12_GENESIS_FILE_PASSWORD --no-cache
    else
      echo "Building Global L0 image... (USING CACHE)"
      $dockercompose build --build-arg TESSELLATION_VERSION=$TESSELLATION_VERSION --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_KEY_ALIAS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD=$P12_GENESIS_FILE_PASSWORD
    fi
    echo "Global L0 image built"
    cd ../
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "dag-l1" ]]; then
    cd dag-l1
    if [ ! -z "$argc_no_cache" ]; then
      echo "Building DAG L1 image... (NO CACHE)"
      $dockercompose build --build-arg TESSELLATION_VERSION=$TESSELLATION_VERSION --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD --no-cache
    else
      echo "Building DAG L1 image... (USING CACHE)"
      $dockercompose build --build-arg TESSELLATION_VERSION=$TESSELLATION_VERSION --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD
    fi
    echo "DAG L1 image built"
    cd ../
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "metagraph-l0" ]]; then
    export SHOULD_RESET_GENESIS_FILE=""
    export METAGRAPH_ID=""
    cd metagraph-l0-genesis
    if [ ! -z "$argc_no_cache" ]; then
      echo "Building Currency L0 image... (NO CACHE)"
      $dockercompose build --build-arg TEMPLATE_NAME=$PROJECT_NAME --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD --no-cache
      cd ../metagraph-l0
      $dockercompose build --build-arg TEMPLATE_NAME=$PROJECT_NAME --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD --no-cache
    else
      echo "Building Currency L0 image... (USING CACHE)"
      $dockercompose build --build-arg TEMPLATE_NAME=$PROJECT_NAME --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD
      cd ../metagraph-l0
      $dockercompose build --build-arg TEMPLATE_NAME=$PROJECT_NAME --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD
    fi
    echo "Currency L0 image built"
    cd ../
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "metagraph-l1-currency" ]]; then
    cd metagraph-l1-currency
    if [ ! -z "$argc_no_cache" ]; then
      echo "Building Currency L1 image... (NO CACHE)"
      $dockercompose build  --build-arg TEMPLATE_NAME=$PROJECT_NAME --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD --no-cache
    else
      echo "Building Currency L1 image... (USING CACHE)"
      $dockercompose build  --build-arg TEMPLATE_NAME=$PROJECT_NAME --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD
    fi
    echo "Currency L1 image built"
    cd ../
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "metagraph-l1-data" ]]; then
    cd metagraph-l1-data
    if [ ! -z "$argc_no_cache" ]; then
      echo "Building Data L1 image... (NO CACHE)"
      $dockercompose build --build-arg TEMPLATE_NAME=$PROJECT_NAME --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD --no-cache
    else
      echo "Building Data L1 image... (USING CACHE)"
      $dockercompose build --build-arg TEMPLATE_NAME=$PROJECT_NAME --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD
    fi
    echo "Data L1 image built"
    cd ../
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "monitoring" ]]; then
    cd monitoring
    if [ ! -z "$argc_no_cache" ]; then
      echo "Building monitoring image... (NO CACHE)"
      $dockercompose build --no-cache
    else
      echo "Building monitoring image... (USING CACHE)"
      $dockercompose build
    fi
    echo "monitoring image built"
    cd ../
  fi

  if [ ! -z "$argc_run" ]; then
    cd ../
    start_containers
  fi

  echo "Cleaning up dangling docker images"
  docker image prune -f
  exit
}

# @cmd Start from genesis the containers
function start_genesis() {
  load_scripts

  set_docker_compose
  OUTPUT_YELLOW=$(tput setaf 3)
  OUTPUT_WHITE=$(tput setaf 7)
  check_if_docker_is_running

  export SHOULD_RESET_GENESIS_FILE=true
  start_containers
}

# @cmd Start containers
function start() {
  load_scripts

  set_docker_compose
  OUTPUT_YELLOW=$(tput setaf 3)
  OUTPUT_WHITE=$(tput setaf 7)
  check_if_docker_is_running

  export SHOULD_RESET_GENESIS_FILE=""
  start_containers
}

# @cmd Stop containers
function stop() { 
  load_scripts

  export SHOULD_RESET_GENESIS_FILE=""
  export METAGRAPH_ID=""
  set_docker_compose
  check_if_docker_is_running

  cd ..

  echo "Stopping containers ..."

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "metagraph-l1-data" ]]; then
    stop_container metagraph-l1-data
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "metagraph-l1-currency" ]]; then
    stop_container metagraph-l1-currency
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "metagraph-l0" ]]; then
    stop_container metagraph-l0-genesis
    stop_container metagraph-l0
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "dag-l1" ]]; then
    stop_container dag-l1
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "global-l0" ]]; then
    stop_container global-l0
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "monitoring" ]]; then
    stop_container monitoring
  fi
}

# @cmd Destroy containers
# @flag   --delete_project            Delete custom project
function destroy() {
  export SHOULD_RESET_GENESIS_FILE=""
  export METAGRAPH_ID=""

  load_scripts

  set_docker_compose
  check_if_docker_is_running

  cd ..

  echo "Starting destroying containers ..."

  if [[ ! -z "$argc_delete_project" ]]; then
    echo "Removing the project codebase at $1..."
    rm -r source/project/$PROJECT_NAME
    echo "Removed!"
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "metagraph-l1-data" ]]; then
    destroy_container metagraph-l1-data
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "metagraph-l1-currency" ]]; then
    destroy_container metagraph-l1-currency
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "metagraph-l0" ]]; then
    destroy_container metagraph-l0-genesis
    destroy_container metagraph-l0
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "dag-l1" ]]; then
    destroy_container dag-l1
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "global-l0" ]]; then
    destroy_container global-l0
  fi

  if [[ " ${DOCKER_CONTAINERS[*]} " =~ "monitoring" ]]; then
    destroy_container monitoring
  fi

  destroy_container ubuntu-with-java-and-sbt

  docker network rm custom-network
  docker image prune -f
}

# @cmd Check the status of the containers
# @flag  --show_all    Show all containers, including the stopped
function status() {
  load_scripts
  
  set_docker_compose
  check_if_docker_is_running
  if [[ ! -z "$argc_show_all" ]]; then
    docker ps -a --format "table {{.Names}}\t{{.Ports}}\t{{.Status}}"
  else
    docker ps --format "table {{.Names}}\t{{.Ports}}\t{{.Status}}"
  fi
}

eval "$(argc --argc-eval "$0" "$@")"